#!/usr/bin/env python
"""
Script de valida√ß√£o final do projeto LOPES PEINTURE
Verifica se tudo est√° funcionando corretamente
"""

import os
import sys
import django
from django.core.management import execute_from_command_line
from django.test.utils import get_runner
from django.conf import settings


def setup_django():
    """Configurar Django"""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
    django.setup()


def check_models():
    """Verificar modelos"""
    print("üîç Verificando modelos...")

    from django.contrib.auth import get_user_model
    from profiles.models import Profile

    User = get_user_model()

    # Verificar se modelos est√£o acess√≠veis
    print(f"  ‚úÖ User model: {User}")
    print(f"  ‚úÖ Profile model: {Profile}")

    # Verificar campos obrigat√≥rios
    user_fields = [f.name for f in User._meta.fields]
    required_user_fields = ["email", "first_name", "last_name", "account_type"]

    for field in required_user_fields:
        if field in user_fields:
            print(f"  ‚úÖ Campo User.{field}: OK")
        else:
            print(f"  ‚ùå Campo User.{field}: FALTANDO")

    return True


def check_database():
    """Verificar banco de dados"""
    print("üóÉÔ∏è  Verificando banco de dados...")

    from django.contrib.auth import get_user_model
    from django.contrib.auth.models import Group

    User = get_user_model()

    try:
        # Verificar se pode consultar usu√°rios
        user_count = User.objects.count()
        print(f"  ‚úÖ Usu√°rios no banco: {user_count}")

        # Verificar grupos
        group_count = Group.objects.count()
        print(f"  ‚úÖ Grupos no banco: {group_count}")

        # Verificar superusu√°rio
        admin_count = User.objects.filter(is_superuser=True).count()
        print(f"  ‚úÖ Superusu√°rios: {admin_count}")

        return True

    except Exception as e:
        print(f"  ‚ùå Erro no banco: {e}")
        return False


def check_urls():
    """Verificar URLs"""
    print("üåê Verificando URLs...")

    from django.urls import reverse
    from django.test import Client

    client = Client()

    # URLs que devem estar acess√≠veis
    urls_to_check = [
        ("pages:home", "Home"),
        ("accounts:login", "Login"),
        ("accounts:register", "Registro"),
    ]

    for url_name, description in urls_to_check:
        try:
            url = reverse(url_name)
            response = client.get(url)

            if response.status_code in [200, 302]:
                print(f"  ‚úÖ {description} ({url}): OK")
            else:
                print(f"  ‚ö†Ô∏è  {description} ({url}): Status {response.status_code}")

        except Exception as e:
            print(f"  ‚ùå {description}: Erro - {e}")

    return True


def check_static_files():
    """Verificar arquivos est√°ticos"""
    print("üì¶ Verificando arquivos est√°ticos...")

    static_dirs = ["static", "media", "staticfiles"]

    for static_dir in static_dirs:
        if os.path.exists(static_dir):
            print(f"  ‚úÖ Diret√≥rio {static_dir}: Existe")
        else:
            print(f"  ‚ö†Ô∏è  Diret√≥rio {static_dir}: N√£o encontrado")

    return True


def check_templates():
    """Verificar templates"""
    print("üìÑ Verificando templates...")

    templates_to_check = [
        "templates/base.html",
        "templates/accounts/login.html",
        "templates/accounts/register.html",
        "templates/dashboard/dashboard.html",
    ]

    for template in templates_to_check:
        if os.path.exists(template):
            print(f"  ‚úÖ {template}: Existe")
        else:
            print(f"  ‚ùå {template}: N√£o encontrado")

    return True


def run_basic_tests():
    """Executar testes b√°sicos"""
    print("üß™ Executando testes b√°sicos...")

    try:
        # Executar apenas testes de modelos (mais r√°pido)
        from django.test.utils import get_runner
        from django.conf import settings

        TestRunner = get_runner(settings)
        test_runner = TestRunner()

        # Executar testes espec√≠ficos
        failures = test_runner.run_tests(["accounts.tests.test_models"])

        if failures:
            print(f"  ‚ùå {failures} teste(s) falharam")
            return False
        else:
            print("  ‚úÖ Todos os testes passaram")
            return True

    except Exception as e:
        print(f"  ‚ö†Ô∏è  Erro ao executar testes: {e}")
        return False


def main():
    """Fun√ß√£o principal"""
    print("üé® VALIDA√á√ÉO DO PROJETO LOPES PEINTURE")
    print("=" * 50)

    # Setup Django
    setup_django()

    checks = [
        ("Modelos", check_models),
        ("Banco de Dados", check_database),
        ("URLs", check_urls),
        ("Arquivos Est√°ticos", check_static_files),
        ("Templates", check_templates),
        ("Testes B√°sicos", run_basic_tests),
    ]

    results = []

    for check_name, check_func in checks:
        print(f"\n{check_name}:")
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            print(f"  ‚ùå Erro durante verifica√ß√£o: {e}")
            results.append((check_name, False))

    # Resumo final
    print("\n" + "=" * 50)
    print("üìä RESUMO DA VALIDA√á√ÉO:")
    print("=" * 50)

    total_checks = len(results)
    passed_checks = sum(1 for _, result in results if result)

    for check_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"  {check_name}: {status}")

    print(f"\nüìà RESULTADO: {passed_checks}/{total_checks} verifica√ß√µes passaram")

    if passed_checks == total_checks:
        print("üéâ PROJETO VALIDADO COM SUCESSO!")
        print("\nüöÄ Pr√≥ximos passos:")
        print("  1. Execute: python manage.py runserver")
        print("  2. Acesse: http://127.0.0.1:8000/")
        print("  3. Teste todas as funcionalidades")
        return True
    else:
        print("‚ö†Ô∏è  ALGUNS PROBLEMAS ENCONTRADOS")
        print("\nüîß Corrija os problemas antes de continuar")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
